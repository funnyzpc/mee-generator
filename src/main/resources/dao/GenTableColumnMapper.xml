<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mee.generator.mapper.GenTableColumnMapper">
    <cache/>
    <cache-ref namespace="com.mee.generator.mapper.GenTableColumnMapper"/>
    <resultMap type="com.mee.generator.entity.GenTableColumn" id="GenTableColumnResult">
        <id     property="column_id"       column="column_id"      />
        <result property="table_id"        column="table_id"       />
        <result property="column_name"     column="column_name"    />
        <result property="column_comment"  column="column_comment" />
        <result property="column_type"     column="column_type"    />
        <result property="java_type"       column="java_type"      />
        <result property="java_field"      column="java_field"     />
        <result property="is_pk"           column="is_pk"          />
        <result property="is_increment"    column="is_increment"   />
        <result property="is_required"     column="is_required"    />
        <result property="is_insert"       column="is_insert"      />
        <result property="is_edit"         column="is_edit"        />
        <result property="is_list"         column="is_list"        />
        <result property="is_query"        column="is_query"       />
        <result property="query_type"      column="query_type"     />
        <result property="html_type"       column="html_type"      />
        <result property="dict_type"       column="dict_type"      />
        <result property="sort"            column="sort"           />
        <result property="create_by"       column="create_by"      />
        <result property="create_time"     column="create_time"    />
<!--        <result property="update_by"       column="update_by"      />
        <result property="update_time"     column="update_time"    />-->
    </resultMap>
	
	<sql id="selectGenTableColumnVo">
        SELECT COLUMN_ID, TABLE_ID, COLUMN_NAME, COLUMN_COMMENT, COLUMN_TYPE, JAVA_TYPE, JAVA_FIELD, IS_PK, IS_INCREMENT, IS_REQUIRED, IS_INSERT, IS_EDIT, IS_LIST, IS_QUERY, QUERY_TYPE, HTML_TYPE, DICT_TYPE, SORT, CREATE_BY, CREATE_TIME /*, UPDATE_BY, UPDATE_TIME*/ FROM GEN_TABLE_COLUMN
    </sql>
	
    <select id="selectGenTableColumnListByTableId" parameterType="Long" resultMap="GenTableColumnResult">
        <include refid="selectGenTableColumnVo"/>
        where table_id = #{tableId}
        ORDER BY SORT
    </select>

    <select id="selectDbTableColumnsByName" parameterType="String" resultMap="GenTableColumnResult">
        SELECT
            T1.*,
            T2.TABLE_COMMENT,
            T2.COLUMN_COMMENT,
            T2.COLUMN_TYPE,
            CASE WHEN T3.COLUMN_NAME IS NOT NULL THEN '1' ELSE '0' END AS IS_PK <!--主键-->
        FROM
        (
            select
            t.table_name,
            c.column_name::text as column_name,
            case  c.is_nullable when 'NO' then '1' else '0' end  as is_required,
            -- null as is_pk,
            c.ordinal_position as sort,
            -- null as column_comment,
            case c.is_generated when 'NEVER' then '0' else '1'end as is_increment
            -- concat_ws('', data_type) as column_type
            from information_schema.tables t
            -- inner join information_schema.columns c on  t.table_name = c.table_name
            inner join information_schema.columns c on  t.table_name = c.table_name and t.table_schema=c.table_schema
            where t.table_schema = (select current_schema())
            --and t.table_type= 'BASE TABLE'
            --and c.table_schema = 'public'
            and t.table_name=#{table_name}
            -- group by t.table_name
        ) as t1  left join
        (
            -- 获取表注释 及 字段类型
            select
            c.oid,
            c.relname as table_name,
            cast(obj_description(c.relfilenode,'pg_class') as varchar) as table_comment, --表注释
            d.description  as column_comment, --字段注释
            a.attname as  column_name,
            a.atttypid as 类型id,
            t.typname as column_type
            from pg_class as c
            left join pg_attribute as a on a.attrelid=c.oid
            left join pg_type as t on t.oid=a.atttypid
            left join pg_description as d on  d.objoid=a.attrelid and d.objsubid=a.attnum
            where  c.relname=#{table_name}
            and a.attnum>0
            and c.relnamespace::regnamespace::varchar =  (select current_schema() )
        ) as t2 on t1.table_name=t2.table_name and  t1.column_name=t2.column_name
        left join
        (
            -- 获取主键
            SELECT
            C.conrelid::REGCLASS::varchar AS table_name,
            A.attname  column_name
            FROM
            pg_constraint
            C INNER JOIN pg_namespace n ON n.OID = C.connamespace
            CROSS JOIN LATERAL UNNEST ( C.conkey ) ak ( K )
            INNER JOIN pg_attribute A ON A.attrelid = C.conrelid
            AND A.attnum = ak.K
            WHERE C.conrelid::REGCLASS::TEXT = #{table_name}
            ORDER BY C.contype
        ) as t3  on t1.table_name=t3.table_name and t1.column_name=t3.column_name
    </select>

    <select id="selectDbTableColumnsByName" parameterType="String" resultMap="GenTableColumnResult" databaseId="oracle">
        SELECT
            t1.*,t2.*,
            CASE WHEN t3.column_name IS NOT NULL THEN '1' ELSE '0' END AS is_pk,
            CASE WHEN t4.COLUMN_NAME IS NOT NULL THEN '1' ELSE '0' END AS is_required,
            '0' is_increment
        FROM
        (
            SELECT tc.TABLE_NAME ,tc.COLUMN_NAME,tc.COLUMN_ID AS sort,tc.data_type AS column_type,
            COALESCE(tc.DATA_PRECISION,tc.data_length) AS LENGTH,
            tc.DATA_SCALE SCALE
            FROM USER_TAB_COLUMNS tc
        ) t1
        LEFT JOIN
        (
            SELECT cc.comments AS column_comment,cc.table_name ,cc.column_name  FROM user_col_comments cc
        ) t2 ON t1.table_name=t2.table_name AND t1.column_name=t2.column_name
        LEFT JOIN
        (
            select ucc.constraint_name,ucc.TABLE_NAME ,ucc.COLUMN_NAME
            from user_cons_columns ucc left JOIN  user_constraints uc
            ON  ucc.constraint_name = uc.constraint_name
            AND ucc.table_name=uc.TABLE_NAME
            where uc.constraint_type = 'P'
        ) t3 ON t1.table_name=t3.table_name AND t1.column_name=t3.column_name
        LEFT JOIN
        (
            select ucc.TABLE_NAME ,ucc.COLUMN_NAME
            from user_cons_columns ucc left JOIN  user_constraints uc
            ON  ucc.constraint_name = uc.constraint_name
            AND ucc.table_name=uc.TABLE_NAME
            GROUP BY ucc.TABLE_NAME ,ucc.COLUMN_NAME
        ) t4 ON t1.table_name=t4.table_name AND t1.column_name=t4.column_name
        WHERE t1.table_name=#{table_name}
    </select>

<!--   mysql
    <select id="selectDbTableColumnsByName" parameterType="String" resultMap="GenTableColumnResult">
		select column_name, (case when (is_nullable = 'no' <![CDATA[ && ]]> column_key != 'PRI') then '1' else null end) as is_required, (case when column_key = 'PRI' then '1' else '0' end) as is_pk, ordinal_position as sort, column_comment, (case when extra = 'auto_increment' then '1' else '0' end) as is_increment, column_type
		from information_schema.columns where table_schema = (select database()) and table_name = (#{tableName})
		order by ordinal_position
	</select>-->
    
<!--    <insert id="insertGenTableColumn" parameterType="com.mee.generator.entity.GenTableColumn" useGeneratedKeys="true" keyProperty="columnId">-->
    <insert id="insertGenTableColumn" parameterType="com.mee.generator.entity.GenTableColumn" >
        INSERT INTO GEN_TABLE_COLUMN (
            COLUMN_ID,
			TABLE_ID,
			COLUMN_NAME,
			COLUMN_COMMENT,
			COLUMN_TYPE,
			JAVA_TYPE,
			JAVA_FIELD,
			IS_PK,
			IS_INCREMENT,
			IS_REQUIRED,
			IS_INSERT,
			IS_EDIT,
			IS_LIST,
			IS_QUERY,
			QUERY_TYPE,
			HTML_TYPE,
			DICT_TYPE,
			SORT,
			CREATE_BY,
			CREATE_TIME
         )VALUES(
            #{column_id},
			#{table_id},
			#{column_name},
			#{column_comment,jdbcType=VARCHAR},
			#{column_type},
			#{java_type},
			#{java_field},
			#{is_pk},
			#{is_increment},
			#{is_required},
			#{is_insert},
			#{is_edit,jdbcType=VARCHAR},
			#{is_list,jdbcType=VARCHAR},
			#{is_query,jdbcType=VARCHAR},
			#{query_type},
			#{html_type,jdbcType=VARCHAR},
			#{dict_type,jdbcType=VARCHAR},
            #{sort},
			#{create_by},
			#{create_time}
         )
    </insert>
	 
    <update id="updateGenTableColumn" parameterType="com.mee.generator.entity.GenTableColumn">
        update GEN_TABLE_COLUMN
        <set>
            <if test="column_comment != null">column_comment = #{column_comment},</if>
            <if test="java_type != null">java_type = #{java_type},</if>
            <if test="java_field != null">java_field = #{java_field},</if>
            <if test="is_insert != null">is_insert = #{is_insert},</if>
            <if test="is_edit != null">is_edit = #{is_edit},</if>
            <if test="is_list != null">is_list = #{is_list},</if>
            <if test="is_query != null">is_query = #{is_query},</if>
            <if test="is_required != null">is_required = #{is_required},</if>
            <if test="query_type != null">query_type = #{query_type},</if>
            <if test="html_type != null">html_type = #{html_type},</if>
            <if test="dict_type != null">dict_type = #{dict_type},</if>
            <if test="sort != null">sort = #{sort},</if>
            <!--
            <if test="update_by != null">update_by = #{update_by},</if>
            update_time = now()
            -->
        </set>
        where column_id = #{column_id}
        and table_id = #{table_id}
    </update>

<!--    <delete id="deleteGenTableColumnByIds" parameterType="Long">
        delete from GEN_TABLE_COLUMN where table_id in 
        <foreach collection="array" item="tableId" open="(" separator="," close=")">
            #{tableId}
        </foreach>
    </delete>-->

    <delete id="deleteByTableId" >
        delete from GEN_TABLE_COLUMN where table_id=#{table_id}
    </delete>
    
    <delete id="deleteGenTableColumns">
        delete from GEN_TABLE_COLUMN where column_id in 
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.columnId}
        </foreach>
    </delete>

<!--    <select id="findList" resultType="java.util.Map" resultMap="GenTableColumnResult">-->
    <select id="findList" resultMap="GenTableColumnResult">
        select * from GEN_TABLE_COLUMN
        <where>
            <if test="column_id!=null">and column_id=#{column_id}</if>
            <if test="table_id!=null">and table_id=#{table_id}</if>
            <if test="column_id!=null">and column_id=#{column_id}</if>
            <if test="java_type!=null and java_type!=''">and java_type=#{java_type}</if>
        </where>
        order by column_id desc
    </select>

    <select id="findList2" resultType="java.util.Map">
        select * from GEN_TABLE_COLUMN
        <where>
            <if test="table_id!=null">and table_id=#{table_id}</if>
            <if test="column_id!=null">and column_id=#{column_id}</if>
            <if test="java_type!=null and java_type!=''">and java_type=#{java_type}</if>
        </where>
        ORDER BY COLUMN_ID DESC
    </select>

</mapper>
